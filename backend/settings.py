"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 3.0.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os

from dotenv import load_dotenv

from boto3.session import Session

from corsheaders.defaults import default_headers

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '6m2&5qpos3ln&cv_x9!#x%g^v6u^-xtp$^cum(t3kl_qp)5=ae'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]


# Application definition

DJANGO_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework.authtoken'
]


THIRD_PARTY_APPS = [
    'rest_framework',
    'corsheaders',
    'storages',
]

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [

        'modules.user.views.authentication.customtoken'

    ],
}


LOCAL_APPS = [
    'modules.user',    
]

INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + LOCAL_APPS

# INSTALLED_APPS = [
#     'django.contrib.admin',
#     'django.contrib.auth',
#     'django.contrib.contenttypes',
#     'django.contrib.sessions',
#     'django.contrib.messages',
#     'django.contrib.staticfiles',
# ]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'backend.urls'

AUTH_USER_MODEL = 'user.User'

CORS_ORIGIN_ALLOW_ALL = True

CORS_ALLOW_HEADERS = list(default_headers) + [
    'Medium',
    'Portal'
] 

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'

# load environment variables

if os.environ.get('ENV') not in ['Dev', 'Staging', 'Production']:
    os.environ['ENV'] = 'local'

if os.environ.get('ENV') in ['local', 'Dev']:
    load_dotenv(os.path.join(BASE_DIR, 'backend', '.env'), override=True)


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True if os.environ['ENV'] == 'local' else False

# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': os.environ.get('DB_ENGINE', "django.db.backends.mysql"),
        'NAME': os.environ.get('DB_NAME'),
        'USER': os.environ.get('DB_USER'),
        'PASSWORD': os.environ.get('DB_PASS'),
        'HOST': os.environ.get('DB_HOST'),
        'PORT': os.environ.get('DB_PORT'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 6,
        }
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

TIME_ZONE = 'Asia/Karachi'


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

# STATIC_URL = '/static/'

try:
    # local environment
    SITE_URL = 'http://127.0.0.1:8050'        
    STATIC_URL = '/static/'
    STATIC_ROOT = os.path.join(BASE_DIR, 'static/')

    MEDIA_ROOT = os.path.join(BASE_DIR, 'data/')     # 'media/'
    MEDIA_URL = '/data/'    # '/media/'
    
    DATA_PATH = os.path.join(BASE_DIR, MEDIA_ROOT)

    # Logging: local and Dev
    if os.environ.get('ENV') in ['local', 'Dev', 'Staging']:
        LOGGING = {
            'version': 1,
            'disable_existing_loggers': False,
            'formatters': {
                'verbose': {
                    # 'format' : '[%(levelname)s][%(asctime)s]: | File: %(filename)s Module: [%(module)s] Path: %(pathname)s Line: %(lineno)s | %(message)s',
                    'format': '[%(levelname)s][%(asctime)s]: | %(filename)s > [%(module)s] > %(funcName)s() > Line:%(lineno)s | %(message)s',
                    'datefmt': "%d/%b/%Y %H:%M:%S"
                },
                'simple': {
                    'format': '%(levelname)s %(message)s'
                },
            },
            'handlers': {
                'file': {
                    'level': 'INFO',
                    # 'class': 'logging.FileHandler',
                    'filename': 'bikerental.log',
                    'formatter': 'verbose',
                    'class': 'logging.handlers.TimedRotatingFileHandler',
                    'when': 'W0',       # this specifies the interval
                    'interval': 1,      # defaults to 1, only necessary for other values
                    'backupCount': 8,   # how many backup file to keep, 10 days
                },
                'null': {
                    'level': 'DEBUG',
                    'class': 'logging.NullHandler',
                },
                'console': {
                    'level': 'INFO',
                    'class': 'logging.StreamHandler',
                    'formatter': 'verbose'
                },
                'mail_admins': {
                    'level': 'ERROR',
                    'class': 'django.utils.log.AdminEmailHandler',
                },
            },
            'loggers': {
                'backend': {
                    'handlers': ['console', 'file'],
                    'level': 'INFO',
                },
                'django.request': {
                    'handlers': ['mail_admins', 'console', 'file'],
                    'level': 'ERROR',
                    'propagate': False,
                },
                'modules': {
                    'handlers': ['console', 'file'],
                    'level': 'INFO',
                },
                # 'django': {
                #     'handlers': ['console'],
                #     'propagate': True,
                #     'level': 'DEBUG',
                # },
            }
        }

    # TODO: log path for staging and production
    print('ENV', os.environ.get('ENV'))
except Exception as e:
    print(f"Error in settings.py {str(e)}")
    pass